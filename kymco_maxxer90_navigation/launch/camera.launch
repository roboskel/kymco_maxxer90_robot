<?xml version="1.0"?>
<launch>
    <arg name="camera" default="/camera/color"/>
    <arg name="camera_depth" default="/camera/depth"/>
    <arg name="robot_height" default="1.0"/>

    <!-- fistly image_raw -> image_rect -->
    <node ns="$(arg camera)" pkg="image_proc" type="image_proc" name="image_proc"/>

    <!-- http://wiki.ros.org/rtabmap_ros#rtabmap_ros.2Frgbd_sync | https://github.com/introlab/rtabmap_ros/issues/423 -->
    <node pkg="nodelet" type="nodelet" name="rgbd_sync" args="standalone rtabmap_ros/rgbd_sync" output="screen">
        <remap from="rgb/image"         to="$(arg camera)/image_rect"/>
        <remap from="depth/image"       to="$(arg camera_depth)/image_raw"/>
        <remap from="rgb/camera_info"   to="$(arg camera)/camera_info"/>
        <remap from="rgbd_image"        to="rgbd_image"/>   <!-- output -->

        <!-- Should be true for not synchronized camera topics (e.g., false for kinectv2, zed, realsense, true for xtion, kinect360) -->
        <param name="approx_sync"       value="true"/>
    </node>


    <!-- Generate obstacles and ground pointcloud -->
    <node pkg="nodelet" type="nodelet" name="standalone_manager" args="manager" output="screen" />

    <!-- Run a VoxelGrid filter to clean NaNs and downsample the data -->
    <node pkg="nodelet" type="nodelet" name="voxel_grid" args="load pcl/VoxelGrid standalone_manager" output="screen">
        <remap from="~input" to="$(arg camera_depth)/points" />
        <rosparam>
        filter_field_name: z
        filter_limit_min: 0.01
        filter_limit_max: 1.5
        filter_limit_negative: False
        leaf_size: 0.05
        </rosparam>
    </node>

    <node pkg="nodelet" type="nodelet" name="obstacles_detection" args="load rtabmap_ros/obstacles_detection standalone_manager">
        <remap from="cloud"        to="/voxel_grid/output"/>   <!-- input -->
        <remap from="obstacles"    to="/obstacles"/>   <!-- Can be used for marking obstacles -->
        <remap from="ground"       to="/ground"/>      <!-- Can be used for clearing obstacles -->

        <param name="frame_id"                  value="base_link"/>
        <param name="map_frame_id"              value="map"/>
        <param name="Grid/MinClusterSize"       value="20"/>
        <param name="Grid/MaxObstacleHeight"    value="$(arg robot_height)"/>
        <param name="Grid/RangeMax"             value="5.0"/>   <!-- Maximum range from sensor. 0=inf. -->

    </node>

<?ignore
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">
        <remap from="cloud_in"  to="/obstacles"/>       <!-- INPUT -->
        <remap from="scan"      to="/obstacles_scan"/>  <!-- OUTPUT -->

        <param name="min_height"    value="0.0"/>
        <param name="max_height"    value="$(arg robot_height)"/>
        <param name="range_max"     value="6.0"/>
        <param name="use_inf"       value="true"/>
    </node>

    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">
        <remap from="cloud_in"  to="/ground"/>      <!-- INPUT -->
        <remap from="scan"      to="/ground_scan"/> <!-- OUTPUT -->

        <param name="min_height"    value="0.0"/>
        <param name="max_height"    value="0.2"/>
        <param name="range_max"     value="6.0"/>
        <param name="use_inf"       value="true"/>
    </node>
?>

</launch>
