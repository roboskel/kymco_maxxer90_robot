# The rate in Hz at which to run the global planning loop. If the frequency is set to 0.0, the global planner will only run when a new goal is received or the local planner reports that its path is blocked.
planner_frequency: 0.0 # Default 0.0
# How long the planner will wait in seconds in an attempt to find a valid plan before space-clearing operations are performed.
planner_patience: 5.0 # Default

# The rate in Hz at which to run the control loop and send velocity commands to the base.
controller_frequency: 30.0
# How long the controller will wait in seconds without receiving a valid control before space-clearing operations are performed.
controller_patience: 15.0 # Default

# How long in seconds to allow for oscillation before executing recovery behaviors.
oscillation_timeout: 3.0 # Default 0.0
# How far in meters the robot must move to be considered not to be oscillating.
oscillation_distance: 0.5 # Default

# Determines whether or not to shutdown the costmaps of the node when move_base is in an inactive state.
shutdown_costmaps: false # Default

# Whether or not to enable the move_base recovery behaviors to attempt to clear out space.
recovery_behavior_enabled: true # Default

# Default configuration for recovery behavior
# The distance away from the robot in meters at which obstacles will be cleared from the costmap when attempting to clear space in the map.
#conservative_reset_dist: 0.0 # Default 3.0
# Determines whether or not the robot will attempt an in-place rotation when attempting to clear out space.
#clearing_rotation_allowed: false # Our carlike robot is not able to rotate in place

recovery_behaviors:  #https://answers.ros.org/question/232514/costmap-not-cleared-after-executing-all-recovery-behaviors/
  - name: 'conservative_reset'
    type: 'clear_costmap_recovery/ClearCostmapRecovery'
  - name: 'aggressive_reset'
    type: 'clear_costmap_recovery/ClearCostmapRecovery'

conservative_reset:
  reset_distance: 3.0
  layer_names: ["obstacle_layer"]

aggressive_reset:
  reset_distance: 0.0
  layer_names: ["obstacle_layer"]
